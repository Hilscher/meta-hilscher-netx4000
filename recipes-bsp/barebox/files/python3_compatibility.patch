--- a/arch/arm/Makefile	2020-07-27 10:19:38.169878051 +0200
+++ b/arch/arm/Makefile	2020-07-27 10:48:49.557086607 +0200
@@ -185,7 +185,7 @@
 	$(call cmd,check_file_size,$<.bin,$(CONFIG_BAREBOX_MAX_IMAGE_SIZE))
 	rm $<.bin
 
-	$(Q)python scripts/netx4000/hboot_image_compiler 		\
+	$(Q)python3 scripts/netx4000/hboot_image_compiler 		\
 		-nNETX4000						\
 		-pscripts/netx4000/hboot_netx4000_patch_table.xml	\
 		-Abarebox_elf=$<.elf					\
diff -aurN a/scripts/netx4000/hboot_image_compiler/elf_support.py b/scripts/netx4000/hboot_image_compiler/elf_support.py
--- a/scripts/netx4000/hboot_image_compiler/elf_support.py	2020-07-27 11:15:35.873275947 +0200
+++ b/scripts/netx4000/hboot_image_compiler/elf_support.py	2020-07-27 11:27:03.463727580 +0200
@@ -32,7 +32,7 @@
     atSegments = []
     aCmd = [env['OBJDUMP'], '-h', '-w', strFileName]
     proc = subprocess.Popen(aCmd, stdout=subprocess.PIPE)
-    strOutput = proc.communicate()[0]
+    strOutput = proc.communicate()[0].decode("ascii")
     for match_obj in re.finditer('[ \t]*([0-9]+)[ \t]+([^ \t]+)[ \t]+([0-9a-fA-F]+)[ \t]+([0-9a-fA-F]+)[ \t]+([0-9a-fA-F]+)[ \t]+([0-9a-fA-F]+)[ \t]+([0-9*]+)[ \t]+([a-zA-Z ,]+)', strOutput):
         strName = match_obj.group(2)
         if (astrSegmentsToConsider is None) or (strName in astrSegmentsToConsider):
@@ -54,7 +54,7 @@
 def get_symbol_table(env, strFileName):
     aCmd = [env['READELF'], '--symbols', '--wide', strFileName]
     proc = subprocess.Popen(aCmd, stdout=subprocess.PIPE)
-    strOutput = proc.communicate()[0]
+    strOutput = proc.communicate()[0].decode("ascii")
 
     atSymbols = dict({})
 
@@ -73,7 +73,7 @@
 def get_debug_structure(env, strFileName):
     aCmd = [env['READELF'], '--debug-dump=info', strFileName]
     proc = subprocess.Popen(aCmd, stdout=subprocess.PIPE)
-    strOutput = proc.communicate()[0]
+    strOutput = proc.communicate()[0].decode("ascii")
 
     time_start = datetime.datetime.now()
 
@@ -203,7 +203,7 @@
 def get_macro_definitions(env, strFileName):
     aCmd = [env['READELF'], '--debug-dump=macro', strFileName]
     proc = subprocess.Popen(aCmd, stdout=subprocess.PIPE)
-    strOutput = proc.communicate()[0]
+    strOutput = proc.communicate()[0].decode("ascii")
 
     time_start = datetime.datetime.now()
 
@@ -279,14 +279,14 @@
     tResult = None
     aCmd0 = [env['READELF'], '--syms', strElfFileName]
     proc = subprocess.Popen(aCmd0, stdout=subprocess.PIPE)
-    strOutput0 = proc.communicate()[0]
+    strOutput0 = proc.communicate()[0].decode("ascii")
     match_obj = re.search('\s+\d+:\s+([0-9a-fA-F]+)\s+\d+\s+\w+\s+GLOBAL\s+DEFAULT\s+\d+\s+start', strOutput0)
     if match_obj is not None:
         tResult = int(match_obj.group(1), 16)
     else:
         aCmd1 = [env['READELF'], '--file-header', strElfFileName]
         proc = subprocess.Popen(aCmd1, stdout=subprocess.PIPE)
-        strOutput1 = proc.communicate()[0]
+        strOutput1 = proc.communicate()[0].decode("ascii")
         match_obj = re.search('Entry point address:\s+0x([0-9a-fA-F]+)', strOutput1)
         if match_obj is not None:
             tResult = int(match_obj.group(1), 16)
diff -aurN a/scripts/netx4000/hboot_image_compiler/hboot_image.py b/scripts/netx4000/hboot_image_compiler/hboot_image.py
--- a/scripts/netx4000/hboot_image_compiler/hboot_image.py	2020-07-27 11:15:35.873275947 +0200
+++ b/scripts/netx4000/hboot_image_compiler/hboot_image.py	2020-07-27 11:25:55.750266154 +0200
@@ -1417,7 +1417,7 @@
 
         # Pad the application size to a multiple of DWORDs.
         strPadding = chr(0x00) * ((4 - (len(strData) % 4)) & 3)
-        strChunk = strData + strPadding
+        strChunk = strData + str.encode(strPadding)
 
         # Convert the padded data to an array.
         aulData = array.array('I')
